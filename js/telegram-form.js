// Telegram Form Handler (JavaScript –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞)
class TelegramFormHandler {
    constructor(botToken, chatId) {
        this.botToken = botToken;
        this.chatId = chatId;
        this.apiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
    }

    async sendMessage(data) {
        const message = this.formatMessage(data);
        
        try {
            const response = await fetch(this.apiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    chat_id: this.chatId,
                    text: message,
                    parse_mode: 'Markdown',
                    disable_web_page_preview: true
                })
            });

            const result = await response.json();
            
            if (result.ok) {
                return { success: true, message: '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' };
            } else {
                throw new Error(result.description || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
            }
        } catch (error) {
            console.error('Telegram API Error:', error);
            throw error;
        }
    }

    formatMessage(data) {
        const timestamp = new Date().toLocaleString('ru-RU');
        const referrer = document.referrer || '–ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥';
        
        return `üéØ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞*

üë§ *–ò–º—è:* ${this.escapeMarkdown(data.name)}
üìß *Email:* ${data.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üì± *–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏:* ${this.escapeMarkdown(data.preferred)}
‚è∞ *–í—Ä–µ–º—è –¥–ª—è —Å–≤—è–∑–∏:* ${data.time || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üîó *–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–≤—è–∑–∏:* ${this.escapeMarkdown(data.link || '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üåê *–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç:* ${this.escapeMarkdown(data.project || '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${this.escapeMarkdown(data.comment || '–ù–µ —É–∫–∞–∑–∞–Ω')}

üìÖ ${timestamp}
üåê ${referrer}`;
    }

    escapeMarkdown(text) {
        if (!text) return '';
        return text.replace(/[_*[\]()~`>#+=|{}.!-]/g, '\\$&');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('leadForm');
    const statusEl = document.getElementById('formStatus');
    
    if (!form || !statusEl) return;

                    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
                const BOT_TOKEN = '8200269768:AAFdb6170gTy50TSpXTWZEG_CanwU7ZgLOc';
                const CHAT_ID = '735765614';
    
    const telegramHandler = new TelegramFormHandler(BOT_TOKEN, CHAT_ID);

    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º honeypot
        const honeypot = form.querySelector('input[name="hp"]');
        if (honeypot && honeypot.value) {
            statusEl.textContent = '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏';
            return;
        }

        statusEl.textContent = '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º‚Ä¶';
        
        try {
            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());
            
            // –£–¥–∞–ª—è–µ–º honeypot –ø–æ–ª–µ
            delete data.hp;
            
            const result = await telegramHandler.sendMessage(data);
            
            statusEl.textContent = '–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.';
            form.reset();
            
        } catch (error) {
            console.error('Form submission error:', error);
            statusEl.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –ù–∞–ø–∏—à–∏—Ç–µ –≤ Telegram: @mmopixcom';
        }
    });
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = TelegramFormHandler;
}
